import asyncio
import itertools
from langchain_ollama import ChatOllama
from langchain_core.messages import HumanMessage, SystemMessage, BaseMessage, AIMessage
from typing import Annotated, Sequence, TypedDict
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode
from langgraph.graph import StateGraph, END
from tool_manager import load_tools
from langchain_core.tools import tool


# ------------------------- Progress bar -------------------------
async def progress(message="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"):
    try:
        for c in itertools.cycle(["‚†ã","‚†ô","‚†π","‚†∏","‚†º","‚†¥","‚†¶","‚†ß","‚†á","‚†è"]):
            print(f"\r{message} {c}", end="", flush=True)
            await asyncio.sleep(0.1)
    except asyncio.CancelledError:
        print("\r" + " " * (len(message) + 4) + "\r", end="", flush=True)
        raise


# ------------------------- Agent State -------------------------
class AgentState(TypedDict):
    messages: Annotated[Sequence[BaseMessage], add_messages]


# ------------------------- Assistant -------------------------
class Assistant:
    def __init__(self, model_name: str = "qwen3:30b-a3b-instruct-2507-q4_K_M", temperature: float = 0.1):
        self.llm = ChatOllama(model=model_name, temperature=temperature)
        self.history = []

        # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.internal_tools = [
            self._make_chat_tool(),
            self._make_show_history_tool(),
            self._make_clear_history_tool(),
            self._make_list_tools_tool(),
            self._make_save_history_tool()
        ]

        # –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.external_tools = load_tools()
        self.tools = self.internal_tools + self.external_tools

        self.system_message = SystemMessage(content="""
            –¢—ã ‚Äî —Å–µ–∫—Ä–µ—Ç–∞—Ä—å-–ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã. 
            –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏ –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
            –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á ‚Äî –≤—ã–ø–æ–ª–Ω—è–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
        """)

        self._build_graph()

    # ------------------------- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã -------------------------
    def _make_chat_tool(self):
        @tool
        async def chat_tool() -> str:
            """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é"""
            messages = self.history[-10:]
            response = await self.llm.ainvoke(messages)
            content = getattr(response, "content", None)
            if isinstance(content, dict):
                return content.get("arguments", {}).get("message", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            elif isinstance(content, str):
                return content
            return str(content) if content else "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"
        return chat_tool

    def _make_show_history_tool(self):
        @tool
        async def show_history() -> str:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
            lines = []
            for msg in self.history:
                if hasattr(msg, "content") and msg.content:
                    sender = "–í—ã" if isinstance(msg, HumanMessage) else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    lines.append(f"{sender}: {msg.content}")
            return "\n".join(lines) if lines else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è"
        return show_history

    def _make_clear_history_tool(self):
        @tool
        async def clear_history() -> str:
            """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
            self.history.clear()
            return "üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!"
        return clear_history

    def _make_list_tools_tool(self):
        @tool
        async def list_tools() -> str:
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
            return "\n".join([t.name for t in self.tools])
        return list_tools

    def _make_save_history_tool(self):
        @tool
        async def save_history_to_file(filename: str = "history.txt") -> str:
            """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–∞–π–ª"""
            try:
                def write_file():
                    with open(filename, "w", encoding="utf-8") as f:
                        for msg in self.history:
                            if hasattr(msg, "content") and msg.content:
                                sender = "–í—ã" if isinstance(msg, HumanMessage) else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                                f.write(f"{sender}: {msg.content}\n")
                await asyncio.to_thread(write_file)
                return f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}"
        return save_history_to_file

    # ------------------------- LangGraph -------------------------
    def _build_graph(self):
        def should_continue(state: AgentState) -> str:
            last_message = state["messages"][-1]
            if isinstance(last_message, AIMessage) and last_message.tool_calls:
                return "continue"
            return "end"

        async def call_model(state: AgentState) -> AgentState:
            llm_with_tools = self.llm.bind_tools(self.tools)
            response = await llm_with_tools.ainvoke(state["messages"])
            if response:
                self.history.append(response)
                return {"messages": state["messages"] + [response]}
            return {"messages": state["messages"]}

        self.builder = StateGraph(AgentState)
        self.builder.add_node("model", call_model)
        self.builder.add_node("tools", ToolNode(tools=self.tools))
        self.builder.set_entry_point("model")
        self.builder.add_conditional_edges(
            "model", should_continue, {"continue": "tools", "end": END}
        )
        # –ï—Å–ª–∏ –æ—Ö–æ—Ç–æ —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å —á—Ç–æ —Ç–æ –¥–µ–ª–∞–ª–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        #self.builder.add_edge("tools", "model")
        # –ï—Å–ª–∏ –Ω–µ –æ—Ö–æ—Ç–æ
        self.builder.add_edge("tools", END)
        self.graph = self.builder.compile()

    # ------------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ -------------------------
    async def handle_input(self, user_input: str):
        messages = [self.system_message, HumanMessage(content=user_input)]
        self.history += messages

        task = asyncio.create_task(progress("–î—É–º–∞–µ—Ç"))
        try:
            result = await self.graph.ainvoke({"messages": self.history}, config={"recursion_limit": 5})
        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            result = None
        finally:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
            print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!\n")

        if result and "messages" in result and result["messages"]:
            last_message = result["messages"][-1]
            if hasattr(last_message, "content") and last_message.content:
                print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {last_message.content}\n")

    # ------------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π -------------------------
    async def clear_history(self):
        self.history.clear()
        print("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")

    async def get_history_text(self):
        lines = []
        for msg in self.history:
            if hasattr(msg, "content") and msg.content:
                sender = "–í—ã" if isinstance(msg, HumanMessage) else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                lines.append(f"{sender}: {msg.content}")
        return "\n".join(lines)

    # ------------------------- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -------------------------
    def get_welcome_message(self) -> str:
        lines = ["–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫. –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:"]
        for t in self.tools:
            lines.append(f" - {t.name}")
        return "\n".join(lines)
